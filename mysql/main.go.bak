package main

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
)

// 定义一个全局对象db
var db *sql.DB

// 定义一个初始化数据库函数
func initDB() (err error) {
	// DSN:Data Source Name
	// DSN:data source Name
	dsn := "homestead:secret@tcp(192.168.56.56)/mic?charset=utf8mb4&parseTime=True&loc=Local"
	db, err = sql.Open("mysql", dsn)
	if err != nil {
		return err
	}
	// 尝试与数据库建立连接（校检dsn是否正确）
	err = db.Ping()
	if err != nil {
		return err
	}

	db.SetMaxOpenConns(3)
	db.SetMaxIdleConns(2)

	return nil
}

type versionInfo struct {
	id int
	name string
	url string
}


func queryRowDemo() {
	var ti interface{}
	sqlStr := "select id,name,created_at from car_price_versions where id=?"
	var v versionInfo
	// 非常重要：确保QueryRow之后调用Scan方法， 否则持有的数据库连接不会被释放
	err := db.QueryRow(sqlStr, 1).Scan(&v.id,&v.name,&ti)
	if err != nil {
		fmt.Printf("scan failed, err:%v\n", err)
		return
	}

	fmt.Println(v)
	fmt.Printf("%v",ti)
}

func queryMultiRowDemo() {
	sqlStr := "select id,name from car_price_versions where id >= ?"
	rows, err := db.Query(sqlStr,1)
	if err != nil {
		fmt.Printf("query failed, err:%v\n", err)
		return
	}
	fmt.Printf("%#v\n",db.Stats())
	// 关闭连接
	defer rows.Close()
	for rows.Next() {
		var v versionInfo
		err := rows.Scan(&v.id, &v.name)
		if err != nil {
			fmt.Printf("query failed, err:%v\n", err)
			return
		}
		fmt.Println(v)
	}

}

func insertRowDemo() {
	sqlStr := "insert into car_price_paras(id,name,info)values(?,?,?)"
	ret, err := db.Exec(sqlStr, 99, "test", `{"a":"b"}`)
	if err != nil {
		fmt.Printf("insert failed, err:%v\n", err)
		return
	}
	theID, err := ret.LastInsertId()
	if err != nil {
		fmt.Printf("get lastinsert ID failed, err:%v\n", err)
		return
	}
	fmt.Printf("insert success, the id is %d.\n", theID)
}

func updateRowDemo() {
	sqlStr := "update car_price_paras set name=? where id = ?"
	ret, err := db.Exec(sqlStr, "ll", 99)
	if err != nil {
		fmt.Printf("update failed, err:%v\n", err)
		return
	}
	n, err := ret.RowsAffected() // 操作影响的行数
	if err != nil {
		fmt.Printf("get RowsAffected failed, err:%v\n", err)
		return
	}
	fmt.Printf("update success, affected rows:%d\n", n)
}

// 删除数据
func deleteRowDemo() {
	sqlStr := "delete from car_price_paras where id = ?"
	ret, err := db.Exec(sqlStr, 99)
	if err != nil {
		fmt.Printf("delete failed, err:%v\n", err)
		return
	}
	n, err := ret.RowsAffected() // 操作影响的行数
	if err != nil {
		fmt.Printf("get RowsAffected failed, err:%v\n", err)
		return
	}
	fmt.Printf("delete success, affected rows:%d\n", n)
}

// 预处理查询示例
func prepareQueryDemo() {
	sqlStr := "select id,name from car_price_paras where id > ?"
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		fmt.Printf("prepare failed, err:%v\n", err)
		return
	}
	defer stmt.Close()
	rows, err := stmt.Query(0)
	if err != nil {
		fmt.Printf("query failed, err:%v\n", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var v versionInfo
		err := rows.Scan(&v.id, &v.name)
		if err != nil {
			fmt.Printf("query failed, err:%v\n", err)
			return
		}
		fmt.Println(v)
	}
}

func prepareInsertDemo() {
	sqlStr := "insert into car_price_paras(id,name,info)values(?,?,?)"
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		fmt.Printf("prepare failed, err:%v\n", err)
		return
	}
	defer stmt.Close()

	re, err := stmt.Exec( 99, "test", `{"a":"b"}`)
	if err != nil {
		fmt.Printf("insert failed, err:%v\n", err)
		return
	}
	fmt.Printf("%#v", re)
	fmt.Println("insert success.")
}

// 事务操作示例
func transactionDemo() {
	tx, err := db.Begin() // 开启事务
	if err != nil {
		if tx != nil {
			tx.Rollback() // 回滚
		}
		fmt.Printf("begin trans failed, err:%v\n", err)
		return
	}
	sqlStr1 := "Update user set age=30 where id=?"
	ret1, err := tx.Exec(sqlStr1, 2)
	if err != nil {
		tx.Rollback() // 回滚
		fmt.Printf("exec sql1 failed, err:%v\n", err)
		return
	}
	affRow1, err := ret1.RowsAffected()
	if err != nil {
		tx.Rollback() // 回滚
		fmt.Printf("exec ret1.RowsAffected() failed, err:%v\n", err)
		return
	}

	sqlStr2 := "Update user set age=40 where id=?"
	ret2, err := tx.Exec(sqlStr2, 3)
	if err != nil {
		tx.Rollback() // 回滚
		fmt.Printf("exec sql2 failed, err:%v\n", err)
		return
	}
	affRow2, err := ret2.RowsAffected()
	if err != nil {
		tx.Rollback() // 回滚
		fmt.Printf("exec ret1.RowsAffected() failed, err:%v\n", err)
		return
	}

	fmt.Println(affRow1, affRow2)
	if affRow1 == 1 && affRow2 == 1 {
		fmt.Println("事务提交啦...")
		tx.Commit() // 提交事务
	} else {
		tx.Rollback()
		fmt.Println("事务回滚啦...")
	}

	fmt.Println("exec trans success!")
}

func main() {
	err := initDB()
	if err != nil {
		fmt.Printf("init db failed, err:%v")
		return
	}
	queryRowDemo()
	//fmt.Printf("%#v\n",db.Stats())
	//queryMultiRowDemo()
	//insertRowDemo()
	//updateRowDemo()
	//deleteRowDemo()
	//prepareQueryDemo()
	//prepareInsertDemo()
}